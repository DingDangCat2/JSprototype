 变量提升：通过var定义的变量，其定义会提升到执行作用域的前面。（let不存在！）
var a=3;
function f(){
console.log(a)
var a=4;
}
f();
//undefined
函数执行时，变量的声明会被提升到执行环境的最上面。但是变量的赋值还是在原来的位置。

函数提升：通过function定义的函数，在之前就可以直接调用。


全局执行上下文：
1.执行代码前将window确定为全局上下文。
2.对全局的数据进行预处理，先变量提升，再函数提升，之后将其添加为window的属性和方法。
3.this指向window

函数执行上下文：
1.调用函数执行代码前创建函数执行的上下文（存在于栈中，虚拟，封闭）。
2。对局部数据进行预处理，形参-(赋值)>实参,添加为执行上下文的属性。
3.arguments-（赋值）>实参列表，添加为上下文的属性。
4.变量提升，函数提升，
5this指向上下文。

作用域：个数=全局+定义函数个数
全局作用域是在全局上下文产生之前，代码执行之前产生。
函数作用域在函数定义时产生。

定义函数->函数作用域->函数调用->函数上下文->函数代码执行。
全局作用域->全局上下文->代码执行。